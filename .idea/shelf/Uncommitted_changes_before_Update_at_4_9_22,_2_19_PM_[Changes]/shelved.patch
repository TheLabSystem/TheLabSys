Index: go.sum
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/go.sum b/go.sum
deleted file mode 100644
--- a/go.sum	(revision 8dc9567d73fdf824d7089adfd250f3d4169b7314)
+++ /dev/null	(revision 8dc9567d73fdf824d7089adfd250f3d4169b7314)
@@ -1,146 +0,0 @@
-github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
-github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
-<<<<<<< HEAD
-github.com/fsnotify/fsnotify v1.5.1/go.mod h1:T3375wBYaZdLLcVNkcVbzGHY7f1l/uK5T5Ai1i3InKU=
-github.com/go-sql-driver/mysql v1.6.0 h1:BCTh4TKNUYmOmMUcQ3IipzF5prigylS7XXjEkfCHuOE=
-github.com/go-sql-driver/mysql v1.6.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=
-=======
-github.com/fsnotify/fsnotify v1.5.1 h1:mZcQUHVQUQWoPXXtuf9yuEXKudkV2sx1E06UadKWpgI=
-github.com/fsnotify/fsnotify v1.5.1/go.mod h1:T3375wBYaZdLLcVNkcVbzGHY7f1l/uK5T5Ai1i3InKU=
-github.com/gin-contrib/sse v0.1.0 h1:Y/yl/+YNO8GZSjAhjMsSuLt29uWRFHdHYUb5lYOV9qE=
-github.com/gin-contrib/sse v0.1.0/go.mod h1:RHrZQHXnP2xjPF+u1gW/2HnVO7nvIa9PG3Gm+fLHvGI=
-github.com/gin-gonic/gin v1.7.7 h1:3DoBmSbJbZAWqXJC3SLjAPfutPJJRN1U5pALB7EeTTs=
-github.com/gin-gonic/gin v1.7.7/go.mod h1:axIBovoeJpVj8S3BwE0uPMTeReE4+AfFtqpqaZ1qq1U=
-github.com/go-playground/assert/v2 v2.0.1/go.mod h1:VDjEfimB/XKnb+ZQfWdccd7VUvScMdVu0Titje2rxJ4=
-github.com/go-playground/locales v0.13.0 h1:HyWk6mgj5qFqCT5fjGBuRArbVDfE4hi8+e8ceBS/t7Q=
-github.com/go-playground/locales v0.13.0/go.mod h1:taPMhCMXrRLJO55olJkUXHZBHCxTMfnGwq/HNwmWNS8=
-github.com/go-playground/universal-translator v0.17.0 h1:icxd5fm+REJzpZx7ZfpaD876Lmtgy7VtROAbHHXk8no=
-github.com/go-playground/universal-translator v0.17.0/go.mod h1:UkSxE5sNxxRwHyU+Scu5vgOQjsIJAF8j9muTVoKLVtA=
-github.com/go-playground/validator/v10 v10.4.1 h1:pH2c5ADXtd66mxoE0Zm9SUhxE20r7aM3F26W0hOn+GE=
-github.com/go-playground/validator/v10 v10.4.1/go.mod h1:nlOn6nFhuKACm19sB/8EGNn9GlaMV7XkbRSipzJ0Ii4=
-github.com/go-sql-driver/mysql v1.6.0 h1:BCTh4TKNUYmOmMUcQ3IipzF5prigylS7XXjEkfCHuOE=
-github.com/go-sql-driver/mysql v1.6.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=
-github.com/golang/protobuf v1.3.3/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=
-github.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=
-github.com/golang/protobuf v1.5.2 h1:ROPKBNFfQgOUMifHyP+KYbvpjbdoFNs+aK7DXlji0Tw=
-github.com/golang/protobuf v1.5.2/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=
-github.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
-github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
-github.com/hashicorp/hcl v1.0.0 h1:0Anlzjpi4vEasTeNFn2mLJgTSwt0+6sfsiTG8qcWGx4=
->>>>>>> origin/master
-github.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=
-github.com/jinzhu/inflection v1.0.0 h1:K317FqzuhWc8YvSVlFMCCUb36O/S9MCKRDI7QkRKD/E=
-github.com/jinzhu/inflection v1.0.0/go.mod h1:h+uFLlag+Qp1Va5pdKtLDYj+kHp5pxUVkryuEj+Srlc=
-github.com/jinzhu/now v1.1.4 h1:tHnRBy1i5F2Dh8BAFxqFzxKqqvezXrL2OW1TnX+Mlas=
-github.com/jinzhu/now v1.1.4/go.mod h1:d3SSVoowX0Lcu0IBviAWJpolVfI5UJVZZ7cO71lE/z8=
-<<<<<<< HEAD
-github.com/kr/fs v0.1.0/go.mod h1:FFnZGqtBN9Gxj7eW1uZ42v5BccTP0vu6NEaFoC2HwRg=
-github.com/magiconair/properties v1.8.5/go.mod h1:y3VJvCyxH9uVvJTWEGAELF3aiYNyPKd5NZ3oSwXrF60=
-github.com/mitchellh/mapstructure v1.4.3/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=
-=======
-github.com/json-iterator/go v1.1.9/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
-github.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=
-github.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=
-github.com/kr/fs v0.1.0/go.mod h1:FFnZGqtBN9Gxj7eW1uZ42v5BccTP0vu6NEaFoC2HwRg=
-github.com/leodido/go-urn v1.2.0 h1:hpXL4XnriNwQ/ABnpepYM/1vCLWNDfUNts8dX3xTG6Y=
-github.com/leodido/go-urn v1.2.0/go.mod h1:+8+nEpDfqqsY+g338gtMEUOtuK+4dEMhiQEgxpxOKII=
-github.com/magiconair/properties v1.8.5 h1:b6kJs+EmPFMYGkow9GiUyCyOvIwYetYJ3fSaWak/Gls=
-github.com/magiconair/properties v1.8.5/go.mod h1:y3VJvCyxH9uVvJTWEGAELF3aiYNyPKd5NZ3oSwXrF60=
-github.com/mattn/go-isatty v0.0.12/go.mod h1:cbi8OIDigv2wuxKPP5vlRcQ1OAZbq2CE4Kysco4FUpU=
-github.com/mattn/go-isatty v0.0.14 h1:yVuAays6BHfxijgZPzw+3Zlu5yQgKGP2/hcQbHb7S9Y=
-github.com/mattn/go-isatty v0.0.14/go.mod h1:7GGIvUiUoEMVVmxf/4nioHXj79iQHKdU27kJ6hsGG94=
-github.com/mitchellh/mapstructure v1.4.3 h1:OVowDSCllw/YjdLkam3/sm7wEtOy59d8ndGgCcyj8cs=
-github.com/mitchellh/mapstructure v1.4.3/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=
-github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
-github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=
-github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
-github.com/modern-go/reflect2 v0.0.0-20180701023420-4b7aa43c6742/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=
-github.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=
-github.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=
-github.com/pelletier/go-toml v1.9.4 h1:tjENF6MfZAg8e4ZmZTeWaWiT2vXtsoO6+iuOjFhECwM=
->>>>>>> origin/master
-github.com/pelletier/go-toml v1.9.4/go.mod h1:u1nR/EPcESfeI/szUZKdtJ0xRNbUoANCkoOuaOx1Y+c=
-github.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
-github.com/pkg/sftp v1.10.1/go.mod h1:lYOWFsE0bwd1+KfKJaKeuokY15vzFx25BLbzYYoAxZI=
-github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
-<<<<<<< HEAD
-github.com/spf13/afero v1.6.0/go.mod h1:Ai8FlHk4v/PARR026UzYexafAt9roJ7LcLMAmO6Z93I=
-github.com/spf13/cast v1.4.1/go.mod h1:Qx5cxh0v+4UWYiBimWS+eyWzqEqokIECu5etghLkUJE=
-github.com/spf13/jwalterweatherman v1.1.0/go.mod h1:aNWZUN0dPAAO/Ljvb5BEdw96iTZ0EXowPYD95IqWIGo=
-github.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=
-github.com/spf13/viper v1.10.1/go.mod h1:IGlFPqhNAPKRxohIzWpI5QEy4kuI7tcl5WvR+8qy1rU=
-github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
-github.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=
-github.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=
-github.com/subosito/gotenv v1.2.0/go.mod h1:N0PQaV/YGNqwC0u51sEeR/aUtSLEXKX9iv69rRypqCw=
-golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
-golang.org/x/crypto v0.0.0-20190820162420-60c769a6c586/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
-golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
-golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20210630005230-0f9fa26af87c/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.0.0-20211210111614-af8b64212486/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
-golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
-golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
-golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
-gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
-gopkg.in/ini.v1 v1.66.2/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=
-gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
-=======
-github.com/spf13/afero v1.6.0 h1:xoax2sJ2DT8S8xA2paPFjDCScCNeWsg75VG0DLRreiY=
-github.com/spf13/afero v1.6.0/go.mod h1:Ai8FlHk4v/PARR026UzYexafAt9roJ7LcLMAmO6Z93I=
-github.com/spf13/cast v1.4.1 h1:s0hze+J0196ZfEMTs80N7UlFt0BDuQ7Q+JDnHiMWKdA=
-github.com/spf13/cast v1.4.1/go.mod h1:Qx5cxh0v+4UWYiBimWS+eyWzqEqokIECu5etghLkUJE=
-github.com/spf13/jwalterweatherman v1.1.0 h1:ue6voC5bR5F8YxI5S67j9i582FU4Qvo2bmqnqMYADFk=
-github.com/spf13/jwalterweatherman v1.1.0/go.mod h1:aNWZUN0dPAAO/Ljvb5BEdw96iTZ0EXowPYD95IqWIGo=
-github.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=
-github.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=
-github.com/spf13/viper v1.10.1 h1:nuJZuYpG7gTj/XqiUwg8bA0cp1+M2mC3J4g5luUYBKk=
-github.com/spf13/viper v1.10.1/go.mod h1:IGlFPqhNAPKRxohIzWpI5QEy4kuI7tcl5WvR+8qy1rU=
-github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
-github.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=
-github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=
-github.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=
-github.com/subosito/gotenv v1.2.0 h1:Slr1R9HxAlEKefgq5jn9U+DnETlIUa6HfgEzj0g5d7s=
-github.com/subosito/gotenv v1.2.0/go.mod h1:N0PQaV/YGNqwC0u51sEeR/aUtSLEXKX9iv69rRypqCw=
-github.com/ugorji/go v1.1.7 h1:/68gy2h+1mWMrwZFeD1kQialdSzAb432dtpeJ42ovdo=
-github.com/ugorji/go v1.1.7/go.mod h1:kZn38zHttfInRq0xu/PH0az30d+z6vm202qpg1oXVMw=
-github.com/ugorji/go/codec v1.1.7 h1:2SvQaVZ1ouYrrKKwoSk2pzd4A9evlKJb9oTL+OaLUSs=
-github.com/ugorji/go/codec v1.1.7/go.mod h1:Ax+UKWsSmolVDwsd+7N3ZtXu+yMGCf907BLYF3GoBXY=
-golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
-golang.org/x/crypto v0.0.0-20190820162420-60c769a6c586/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=
-golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
-golang.org/x/crypto v0.0.0-20210817164053-32db794688a5 h1:HWj/xjIHfjYU5nVXpTM0s39J9CbLn7Cc5a7IC5rwsMQ=
-golang.org/x/crypto v0.0.0-20210817164053-32db794688a5/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=
-golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
-golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
-golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20200116001909-b77594299b42/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
-golang.org/x/sys v0.0.0-20210630005230-0f9fa26af87c/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/sys v0.0.0-20211210111614-af8b64212486 h1:5hpz5aRr+W1erYCL5JRhSUBJRph7l9XkNveoExlrKYk=
-golang.org/x/sys v0.0.0-20211210111614-af8b64212486/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
-golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
-golang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=
-golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
-golang.org/x/text v0.3.7 h1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=
-golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
-golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
-golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
-google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
-google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
-google.golang.org/protobuf v1.27.1 h1:SnqbnDw1V7RiZcXPx5MEeqPv2s79L9i7BJUlG/+RurQ=
-google.golang.org/protobuf v1.27.1/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
-gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
-gopkg.in/ini.v1 v1.66.2 h1:XfR1dOYubytKy4Shzc2LHrrGhU0lDCfDGG1yLPmpgsI=
-gopkg.in/ini.v1 v1.66.2/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=
-gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
-gopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
->>>>>>> origin/master
-gopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=
-gopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=
-gorm.io/driver/mysql v1.3.3 h1:jXG9ANrwBc4+bMvBcSl8zCfPBaVoPyBEBshA8dA93X8=
-gorm.io/driver/mysql v1.3.3/go.mod h1:ChK6AHbHgDCFZyJp0F+BmVGb06PSIoh9uVYKAlRbb2U=
-gorm.io/gorm v1.23.1/go.mod h1:l2lP/RyAtc1ynaTjFksBde/O8v9oOGIApu2/xRitmZk=
-gorm.io/gorm v1.23.4 h1:1BKWM67O6CflSLcwGQR7ccfmC4ebOxQrTfOQGRE9wjg=
-gorm.io/gorm v1.23.4/go.mod h1:l2lP/RyAtc1ynaTjFksBde/O8v9oOGIApu2/xRitmZk=
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1649429066567)
+++ b/.idea/.gitignore	(date 1649429066567)
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
Index: go.mod
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module TheLabSystem\n\ngo 1.17\n\nrequire (\n\tgithub.com/fsnotify/fsnotify v1.5.1 // indirect\n\tgithub.com/gin-contrib/sse v0.1.0 // indirect\n\tgithub.com/gin-gonic/gin v1.7.7 // indirect\n\tgithub.com/go-playground/locales v0.13.0 // indirect\n\tgithub.com/go-playground/universal-translator v0.17.0 // indirect\n\tgithub.com/go-playground/validator/v10 v10.4.1 // indirect\n\tgithub.com/go-sql-driver/mysql v1.6.0 // indirect\n\tgithub.com/golang/protobuf v1.5.2 // indirect\n\tgithub.com/hashicorp/hcl v1.0.0 // indirect\n\tgithub.com/jinzhu/inflection v1.0.0 // indirect\n\tgithub.com/jinzhu/now v1.1.4 // indirect\n\tgithub.com/json-iterator/go v1.1.12 // indirect\n\tgithub.com/leodido/go-urn v1.2.0 // indirect\n\tgithub.com/magiconair/properties v1.8.5 // indirect\n\tgithub.com/mattn/go-isatty v0.0.14 // indirect\n\tgithub.com/mitchellh/mapstructure v1.4.3 // indirect\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\n\tgithub.com/pelletier/go-toml v1.9.4 // indirect\n\tgithub.com/spf13/afero v1.6.0 // indirect\n\tgithub.com/spf13/cast v1.4.1 // indirect\n\tgithub.com/spf13/jwalterweatherman v1.1.0 // indirect\n\tgithub.com/spf13/pflag v1.0.5 // indirect\n\tgithub.com/spf13/viper v1.10.1 // indirect\n\tgithub.com/subosito/gotenv v1.2.0 // indirect\n\tgithub.com/ugorji/go/codec v1.1.7 // indirect\n\tgolang.org/x/crypto v0.0.0-20210817164053-32db794688a5 // indirect\n\tgolang.org/x/sys v0.0.0-20211210111614-af8b64212486 // indirect\n\tgolang.org/x/text v0.3.7 // indirect\n\tgoogle.golang.org/protobuf v1.27.1 // indirect\n\tgopkg.in/ini.v1 v1.66.2 // indirect\n\tgopkg.in/yaml.v2 v2.4.0 // indirect\n\tgorm.io/driver/mysql v1.3.3 // indirect\n\tgorm.io/gorm v1.23.4 // indirect\n)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/go.mod b/go.mod
--- a/go.mod	(revision 8dc9567d73fdf824d7089adfd250f3d4169b7314)
+++ b/go.mod	(date 1649431102733)
@@ -3,37 +3,23 @@
 go 1.17
 
 require (
-	github.com/fsnotify/fsnotify v1.5.1 // indirect
 	github.com/gin-contrib/sse v0.1.0 // indirect
 	github.com/gin-gonic/gin v1.7.7 // indirect
 	github.com/go-playground/locales v0.13.0 // indirect
 	github.com/go-playground/universal-translator v0.17.0 // indirect
 	github.com/go-playground/validator/v10 v10.4.1 // indirect
 	github.com/go-sql-driver/mysql v1.6.0 // indirect
-	github.com/golang/protobuf v1.5.2 // indirect
-	github.com/hashicorp/hcl v1.0.0 // indirect
+	github.com/golang/protobuf v1.3.3 // indirect
 	github.com/jinzhu/inflection v1.0.0 // indirect
 	github.com/jinzhu/now v1.1.4 // indirect
-	github.com/json-iterator/go v1.1.12 // indirect
+	github.com/json-iterator/go v1.1.9 // indirect
 	github.com/leodido/go-urn v1.2.0 // indirect
-	github.com/magiconair/properties v1.8.5 // indirect
-	github.com/mattn/go-isatty v0.0.14 // indirect
-	github.com/mitchellh/mapstructure v1.4.3 // indirect
-	github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
-	github.com/modern-go/reflect2 v1.0.2 // indirect
-	github.com/pelletier/go-toml v1.9.4 // indirect
-	github.com/spf13/afero v1.6.0 // indirect
-	github.com/spf13/cast v1.4.1 // indirect
-	github.com/spf13/jwalterweatherman v1.1.0 // indirect
-	github.com/spf13/pflag v1.0.5 // indirect
-	github.com/spf13/viper v1.10.1 // indirect
-	github.com/subosito/gotenv v1.2.0 // indirect
+	github.com/mattn/go-isatty v0.0.12 // indirect
+	github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421 // indirect
+	github.com/modern-go/reflect2 v0.0.0-20180701023420-4b7aa43c6742 // indirect
 	github.com/ugorji/go/codec v1.1.7 // indirect
-	golang.org/x/crypto v0.0.0-20210817164053-32db794688a5 // indirect
-	golang.org/x/sys v0.0.0-20211210111614-af8b64212486 // indirect
-	golang.org/x/text v0.3.7 // indirect
-	google.golang.org/protobuf v1.27.1 // indirect
-	gopkg.in/ini.v1 v1.66.2 // indirect
+	golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9 // indirect
+	golang.org/x/sys v0.0.0-20200116001909-b77594299b42 // indirect
 	gopkg.in/yaml.v2 v2.4.0 // indirect
 	gorm.io/driver/mysql v1.3.3 // indirect
 	gorm.io/gorm v1.23.4 // indirect
Index: Controller/ReservationController/reservationController.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ReservationController\n\nimport (\n\t\"TheLabSystem/Config/ErrorInformation\"\n\t\"TheLabSystem/Service/ReservationService\"\n\t\"TheLabSystem/Types/RequestAndResponseType/ErrNo\"\n\t\"TheLabSystem/Types/RequestAndResponseType/Reservation/SubmitReservationRequestAndResponse\"\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\ntype ReservationController struct {\n}\n\nfunc (controller ReservationController) SubmitReservation(c *gin.Context) {\n\tvar request = &SubmitReservationRequestAndResponse.SubmitReservationRequest{}\n\tvar response = &SubmitReservationRequestAndResponse.SubmitReservationResponse{}\n\tif err := c.ShouldBindJSON(request); err != nil {\n\t\tc.JSON(http.StatusOK, gin.H{\"error\": err.Error()})\n\t\treturn\n\t}\n\tcookie, err := c.Cookie(\"camp-session\")\n\tif err != nil {\n\t\tresponse.Code = ErrNo.LoginRequired\n\t\tresponse.Data.Message = ErrorInformation.GenerateErrorInformation(response.Code)\n\t\tc.JSON(http.StatusOK, response)\n\t\treturn\n\t}\n\tresponse.Code = ReservationService.ReservationService{}.SubmitReservation(cookie, request)\n\tresponse.Data.Message = ErrorInformation.GenerateErrorInformation(response.Code)\n\tc.JSON(http.StatusOK, response)\n\treturn\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Controller/ReservationController/reservationController.go b/Controller/ReservationController/reservationController.go
--- a/Controller/ReservationController/reservationController.go	(revision 8dc9567d73fdf824d7089adfd250f3d4169b7314)
+++ b/Controller/ReservationController/reservationController.go	(date 1649484918841)
@@ -4,6 +4,7 @@
 	"TheLabSystem/Config/ErrorInformation"
 	"TheLabSystem/Service/ReservationService"
 	"TheLabSystem/Types/RequestAndResponseType/ErrNo"
+	"TheLabSystem/Types/RequestAndResponseType/Reservation/RevertReservationRequestAndRespoonse"
 	"TheLabSystem/Types/RequestAndResponseType/Reservation/SubmitReservationRequestAndResponse"
 	"github.com/gin-gonic/gin"
 	"net/http"
@@ -31,3 +32,23 @@
 	c.JSON(http.StatusOK, response)
 	return
 }
+
+func (controller ReservationController) RevertReservation(c *gin.Context) {
+	var request = &RevertReservationRequestAndRespoonse.RevertReservationRequest{}
+	var response = &RevertReservationRequestAndRespoonse.RevertReservationResponse{}
+	if err := c.ShouldBindJSON(request); err != nil {
+		c.JSON(http.StatusOK, gin.H{"error": err.Error()})
+		return
+	}
+	cookie, err := c.Cookie("camp-session")
+	if err != nil {
+		response.Code = ErrNo.LoginRequired
+		response.Data.Message = ErrorInformation.GenerateErrorInformation(response.Code)
+		c.JSON(http.StatusOK, response)
+		return
+	}
+	response.Code = ReservationService.ReservationService{}.RevertReservation(cookie, request.ReservationID)
+	response.Data.Message = ErrorInformation.GenerateErrorInformation(response.Code)
+	c.JSON(http.StatusOK, response)
+	return
+}
Index: Service/ReservationService/reservationService.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ReservationService\n\nimport (\n\t\"TheLabSystem/Dao/DeviceDao\"\n\t\"TheLabSystem/Dao/ReservationDao\"\n\t\"TheLabSystem/Dao/ReservationInfoDao\"\n\t\"TheLabSystem/Dao/ReservationRecordDao\"\n\t\"TheLabSystem/Dao/UserDao\"\n\t\"TheLabSystem/Types/RequestAndResponseType/ErrNo\"\n\t\"TheLabSystem/Types/RequestAndResponseType/Reservation/SubmitReservationRequestAndResponse\"\n\t\"TheLabSystem/Types/ServiceType/Device\"\n\t\"TheLabSystem/Types/ServiceType/Reservation\"\n\t\"TheLabSystem/Types/ServiceType/ReservationInfo\"\n\t\"TheLabSystem/Types/ServiceType/ReservationRecord\"\n\t\"time\"\n)\n\ntype ReservationService struct {\n}\n\nfunc (service ReservationService) SubmitReservation(username string, request *SubmitReservationRequestAndResponse.SubmitReservationRequest) ErrNo.ErrNo {\n\tuser, err := UserDao.FindUserByUsername(username)\n\tif err != nil {\n\t\treturn ErrNo.UnknownError\n\t} else if user.Username == \"\" {\n\t\treturn ErrNo.LoginRequired\n\t}\n\tvar reservationDay time.Time\n\treservationDay, err = time.Parse(\"2006-01-02\", request.Day)\n\tif err != nil {\n\t\treturn ErrNo.ParamInvalid\n\t}\n\tif reservationDay.Before(time.Now()) {\n\t\treturn ErrNo.ParamInvalid\n\t}\n\tif request.Time >= 12 || request.Time < 0 {\n\t\treturn ErrNo.ParamInvalid\n\t}\n\tif request.Num <= 0 {\n\t\treturn ErrNo.ParamInvalid\n\t}\n\t// check if there are still enough device\n\tvar devices []Device.Device\n\tdevices, err = DeviceDao.FindDeviceByType(request.DeviceType)\n\tif len(devices) <= request.Num {\n\t\treturn ErrNo.ParamInvalid\n\t}\n\treservation := Reservation.Reservation{\n\t\tApplicantID: user.UserID,\n\t}\n\tif user.UserType == 1 {\n\t\treservation.Status = 21234\n\t} else if user.UserType == 2 {\n\t\treservation.Status = 112\n\t} else if user.UserType == 3 {\n\t\treservation.Status = 32\n\t}\n\treservation, err = ReservationDao.InsertReservation(reservation)\n\tif err != nil {\n\t\treturn ErrNo.UnknownError\n\t}\n\tvar record = ReservationRecord.ReservationRecord{\n\t\tReservationID: reservation.ReservationID,\n\t\tOperatorID:    user.UserID,\n\t\tOperationType: 1,\n\t\tOperatingDay:  reservation.OperatingDay,\n\t}\n\tif ReservationRecordDao.InsertReservationRecord(record) != nil {\n\t\treturn ErrNo.UnknownError\n\t}\n\tfor i := 0; i < request.Num; i++ {\n\t\tinfo := ReservationInfo.ReservationInfo{\n\t\t\tReservationID:   reservation.ReservationID,\n\t\t\tDeviceID:        devices[i].DeviceID,\n\t\t\tReservationDay:  request.Day,\n\t\t\tReservationTime: request.Time,\n\t\t}\n\t\tif ReservationInfoDao.InsertReservationInfo(info) != nil {\n\t\t\treturn ErrNo.UnknownError\n\t\t}\n\t}\n\treturn ErrNo.OK\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Service/ReservationService/reservationService.go b/Service/ReservationService/reservationService.go
--- a/Service/ReservationService/reservationService.go	(revision 8dc9567d73fdf824d7089adfd250f3d4169b7314)
+++ b/Service/ReservationService/reservationService.go	(date 1649484745254)
@@ -81,3 +81,16 @@
 	}
 	return ErrNo.OK
 }
+
+func (service ReservationService) RevertReservation(username string, reservationID uint) ErrNo.ErrNo {
+	user, err := UserDao.FindUserByUsername(username)
+	if err != nil {
+		return ErrNo.UnknownError
+	} else if user.Username == "" {
+		return ErrNo.LoginRequired
+	}
+	if ReservationDao.UpdateReservation(reservationID, -1) != nil {
+		return ErrNo.UnknownError
+	}
+	return ErrNo.OK
+}
Index: Router/router.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Router\n\nimport (\n\t\"TheLabSystem/Controller/AuthController\"\n\t\"TheLabSystem/Controller/BillController\"\n\t\"TheLabSystem/Controller/DeviceController\"\n\t\"TheLabSystem/Controller/MentalListController\"\n\t\"TheLabSystem/Controller/NoticeController\"\n\t\"TheLabSystem/Controller/ReservationController\"\n\t\"TheLabSystem/Controller/UserServiceController\"\n\t\"TheLabSystem/Controller/VerifyCodeController\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc RegisterRouter(r *gin.Engine) {\n\tg := r.Group(\"/api/v1\")\n\t// auth\n\tg.POST(\"/auth/login\", AuthController.AuthController{}.Login)\n\tg.POST(\"/auth/logout\", AuthController.AuthController{}.Logout)\n\tg.POST(\"/auth/whoAmI\", AuthController.AuthController{}.WhoAmI)\n\n\t// user\n\tg.POST(\"/user/changeUserInfo\", UserServiceController.UserServiceController{}.ChangeUserInfo)\n\tg.POST(\"/user/register\", UserServiceController.UserServiceController{}.RegisterUser)\n\tg.POST(\"/user/addMoney\", UserServiceController.UserServiceController{}.AddMoney)\n\n\t// verify code\n\tg.POST(\"/verifyCode/addVerifyCode\", VerifyCodeController.VerifyCodeController{}.AddVerifyCodeController)\n\tg.POST(\"/verifyCode/viewAllVerifyCode\", VerifyCodeController.VerifyCodeController{}.ViewAllVerifyCode)\n\tg.POST(\"/verifyCode/deleteVerifyCode\", VerifyCodeController.VerifyCodeController{}.DeleteVerifyCode)\n\n\t// notice\n\tg.POST(\"/notice/addNotice\", NoticeController.NoticeController{}.AddNotice)\n\tg.GET(\"/notice/getNotice\", NoticeController.NoticeController{}.GetNoticeList)\n\tg.POST(\"/notice/deleteNotice\", NoticeController.NoticeController{}.DeleteNotice)\n\tg.POST(\"/notice/updateNotice\", NoticeController.NoticeController{}.UpdateNotice)\n\n\t// bill\n\tg.GET(\"/bill/getBill\", BillController.BillController{}.GetBill)\n\tg.POST(\"/bill/payBill\", BillController.BillController{}.PayBill)\n\n\t// mentorList service\n\tg.POST(\"/mentalList/addStudent\", MentalListController.MentalListController{}.AddStudentController)\n\tg.POST(\"/mentalList/deleteStudent\", MentalListController.MentalListController{}.DeleteStudentController)\n\tg.GET(\"/mentalList/viewStudent\", MentalListController.MentalListController{}.ViewStudentController)\n\n\t// device\n\tg.POST(\"/device/addDevice\", DeviceController.DeviceController{}.AddDevice)\n\tg.GET(\"/device/getDeviceType\", DeviceController.DeviceController{}.GetDeviceType)\n\tg.POST(\"/device/updateDevice\", DeviceController.DeviceController{}.UpdateDevice)\n\tg.POST(\"/device/deleteDevice\", DeviceController.DeviceController{}.DeleteDevice)\n\n\t// reservation\n\tg.POST(\"/reservation/submitReservation\", ReservationController.ReservationController{}.SubmitReservation)\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Router/router.go b/Router/router.go
--- a/Router/router.go	(revision 8dc9567d73fdf824d7089adfd250f3d4169b7314)
+++ b/Router/router.go	(date 1649484918773)
@@ -52,4 +52,5 @@
 
 	// reservation
 	g.POST("/reservation/submitReservation", ReservationController.ReservationController{}.SubmitReservation)
+	g.POST("/reservation/revertReservation", ReservationController.ReservationController{}.RevertReservation)
 }
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1649429066547)
+++ b/.idea/vcs.xml	(date 1649429066547)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/dataSources.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/dataSources.xml b/.idea/dataSources.xml
new file mode 100644
--- /dev/null	(date 1649429066551)
+++ b/.idea/dataSources.xml	(date 1649429066551)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="DataSourceManagerImpl" format="xml" multifile-model="true">
+    <data-source source="LOCAL" name="@localhost" uuid="87314a3f-7e10-4144-891a-b1baa6560092">
+      <driver-ref>mysql.8</driver-ref>
+      <synchronize>true</synchronize>
+      <jdbc-driver>com.mysql.cj.jdbc.Driver</jdbc-driver>
+      <jdbc-url>jdbc:mysql://localhost:3306</jdbc-url>
+      <working-dir>$ProjectFileDir$</working-dir>
+    </data-source>
+  </component>
+</project>
\ No newline at end of file
Index: Dao/ReservationDao/reservationDao.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ReservationDao\n\nimport (\n\t\"TheLabSystem/Dao/DBAccessor\"\n\t\"TheLabSystem/Types/ServiceType/Reservation\"\n\t\"fmt\"\n\t\"gorm.io/gorm\"\n)\n\ntype ReservationDao struct {\n\tgorm.Model\n\tApplicantID uint `gorm:\"type:uint\"`\n\tStatus      int  `gorm:\"type:int\"`\n}\n\nvar db *gorm.DB\nvar DBErr error\n\nfunc connectDatabase() {\n\tdb, DBErr = DBAccessor.MysqlInit()\n\tif DBErr == nil {\n\t\tDBErr = db.AutoMigrate(&ReservationDao{})\n\t} else {\n\t\tfmt.Println(\"Error happened when initializing ReservationDao and creating Table in function NoticeDao.connectDatabase()\")\n\t\tfmt.Println(DBErr)\n\t}\n}\nfunc init() {\n\tconnectDatabase()\n}\nfunc convertReservationToDao(reservation Reservation.Reservation) ReservationDao {\n\treturn ReservationDao{\n\t\tApplicantID: reservation.ApplicantID,\n\t\tStatus:      reservation.Status,\n\t}\n}\nfunc convertDaoToReservation(reservationDao ReservationDao) Reservation.Reservation {\n\treturn Reservation.Reservation{\n\t\tReservationID: reservationDao.ID,\n\t\tApplicantID:   reservationDao.ApplicantID,\n\t\tOperatingDay:  reservationDao.CreatedAt.String(),\n\t\tStatus:        reservationDao.Status,\n\t}\n}\nfunc InsertReservation(reservation Reservation.Reservation) (Reservation.Reservation, error) {\n\tvar reservationDao = convertReservationToDao(reservation)\n\tvar res Reservation.Reservation\n\terr := db.Transaction(func(tx *gorm.DB) error {\n\t\tif DBErr == nil {\n\t\t\tDBErr = tx.Create(&reservationDao).Error\n\t\t}\n\t\treturn DBErr\n\t})\n\tif err != nil {\n\t\tfmt.Println(\"Error happened when inserting reservation in function ReservationDao.InsertReservation()\")\n\t\tfmt.Println(err)\n\t\treturn res, err\n\t}\n\tres = convertDaoToReservation(reservationDao)\n\treturn res, err\n}\n\nfunc UpdateReservation(reservationID uint, status int) error {\n\tvar reservationDao ReservationDao\n\treservationDao.ID = reservationID\n\terr := db.Transaction(\n\t\tfunc(tx *gorm.DB) error {\n\t\t\tif err := tx.Model(&reservationDao).Update(\"status\", status).Error; err != nil {\n\t\t\t\ttx.Rollback()\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn nil\n\t\t})\n\tif err != nil {\n\t\tfmt.Println(\"更新预约状态出错\")\n\t}\n\treturn err\n}\n\nfunc FindReservationByID(id uint) (Reservation.Reservation, error) {\n\tvar reservationDao ReservationDao\n\tvar reservation Reservation.Reservation\n\terr := db.Transaction(\n\t\tfunc(tx *gorm.DB) error {\n\t\t\tif err := tx.Where(\"id=?\", id).First(&reservationDao).Error; err != nil {\n\t\t\t\ttx.Rollback()\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn nil\n\t\t})\n\tif err != nil {\n\t\tfmt.Println(\"查找预约出现错误\")\n\t} else {\n\t\treservation = convertDaoToReservation(reservationDao)\n\t}\n\treturn reservation, err\n}\n\nfunc FindAllReservation() ([]Reservation.Reservation, error) {\n\tvar reservationDao []ReservationDao\n\tvar reservation []Reservation.Reservation\n\terr := db.Transaction(\n\t\tfunc(tx *gorm.DB) error {\n\t\t\tif err := tx.Find(&reservationDao).Error; err != nil {\n\t\t\t\ttx.Rollback()\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn nil\n\t\t})\n\tif err != nil {\n\t\tfmt.Println(\"查找预约出现错误\")\n\t} else {\n\t\treservation = make([]Reservation.Reservation, len(reservationDao), len(reservationDao))\n\t\tfor key := range reservationDao {\n\t\t\treservation[key] = convertDaoToReservation(reservationDao[key])\n\t\t}\n\t}\n\treturn reservation, err\n}\nfunc FindApprovalReservation() ([]Reservation.Reservation, error) {\n\tvar reservationDao []ReservationDao\n\tvar reservation []Reservation.Reservation\n\terr := db.Transaction(\n\t\tfunc(tx *gorm.DB) error {\n\t\t\tif err := tx.Where(\"status=1 or status=2 or status=3\").Find(&reservationDao).Error; err != nil {\n\t\t\t\ttx.Rollback()\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn nil\n\t\t})\n\tif err != nil {\n\t\tfmt.Println(\"查找预约出现错误\")\n\t} else {\n\t\treservation = make([]Reservation.Reservation, len(reservationDao), len(reservationDao))\n\t\tfor key := range reservationDao {\n\t\t\treservation[key] = convertDaoToReservation(reservationDao[key])\n\t\t}\n\t}\n\treturn reservation, err\n}\nfunc FindDisapprovalReservation() ([]Reservation.Reservation, error) {\n\tvar reservationDao []ReservationDao\n\tvar reservation []Reservation.Reservation\n\terr := db.Transaction(\n\t\tfunc(tx *gorm.DB) error {\n\t\t\tif err := tx.Where(\"status!=1 and status!=2 and status!=3\").Find(&reservationDao).Error; err != nil {\n\t\t\t\ttx.Rollback()\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn nil\n\t\t})\n\tif err != nil {\n\t\tfmt.Println(\"查找预约出现错误\")\n\t} else {\n\t\treservation = make([]Reservation.Reservation, len(reservationDao), len(reservationDao))\n\t\tfor key := range reservationDao {\n\t\t\treservation[key] = convertDaoToReservation(reservationDao[key])\n\t\t}\n\t}\n\treturn reservation, err\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Dao/ReservationDao/reservationDao.go b/Dao/ReservationDao/reservationDao.go
--- a/Dao/ReservationDao/reservationDao.go	(revision 8dc9567d73fdf824d7089adfd250f3d4169b7314)
+++ b/Dao/ReservationDao/reservationDao.go	(date 1649484677231)
@@ -76,7 +76,6 @@
 	}
 	return err
 }
-
 func FindReservationByID(id uint) (Reservation.Reservation, error) {
 	var reservationDao ReservationDao
 	var reservation Reservation.Reservation
@@ -95,7 +94,6 @@
 	}
 	return reservation, err
 }
-
 func FindAllReservation() ([]Reservation.Reservation, error) {
 	var reservationDao []ReservationDao
 	var reservation []Reservation.Reservation
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1649429066555)
+++ b/.idea/modules.xml	(date 1649429066555)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/TheLabSystem.iml" filepath="$PROJECT_DIR$/.idea/TheLabSystem.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/TheLabSystem.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/TheLabSystem.iml b/.idea/TheLabSystem.iml
new file mode 100644
--- /dev/null	(date 1649429066563)
+++ b/.idea/TheLabSystem.iml	(date 1649429066563)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="EMPTY_MODULE" version="4">
+  <component name="Go" enabled="true" />
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
